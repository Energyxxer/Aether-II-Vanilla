@ on compile
@ require aether:entities/common

define objective coins
define objective coinbar_link
define objective coinbar_timer

# Common access settings for coins
var CoinInfo = dict{
    maxBars: 4,
    barTime: 60,
    pickupSound: resource<aether:aemisc.coin>
}

define function load {
    @ tag load
    
    # Create the bossbars
    var i = 0
    for(i = 0; i < CoinInfo.maxBars; i += 1) {
        var bar = (resource) ("aether:coinbar" + (string)i)
        
        # Create an allocate bar function for each bar
        # (if a player is queues for a coinbar display, and nobody else has this bar, display it)
        define function ${(resource) ("aether:coins/allocate_bar" + (string)i)} {
            @ tag aether:coinbar_allocation
            
            tag @s add this
            
            if entity @s[tag=scheduled_coinbar] unless entity @a[tag=!this,scores={coinbar_link=$i}] function {
                tag @s remove scheduled_coinbar
                set @s->coinbar_link = $i
                set @s->coinbar_timer = ${CoinInfo.barTime}
                
                bossbar set $bar name ["\uFCBA",{"translate":"space.-52"},"\uFC01 x",{"score":{"name":"@s","objective":"coins"}}]
                bossbar set $bar players @s
            }
            tag @s remove this
        }
        
        # Create a reset-bar function for each bar
        # (if a player has a coinbar display using this bar, clear it)
        define function ${(resource) ("aether:coins/reset_bar" + (string)i)} {
            @ tag aether:coinbar_resetting
            
            if entity @s[scores={coinbar_link=$i}] function {
                bossbar set $bar players
            }
        }
        
        # Remove any previous coinbars
        bossbar remove $bar
        
        # Add coinbar
        bossbar add $bar {"text":"placeholder coinbar"}
    }
}

# glorified tag command
define function show_coinbar {
    tag @s add scheduled_coinbar
}

# Allocate and reset each coinbar
define entity default player {
    ticking function {
        # Call all coinbar allocation functions in hopes one will be available
        if entity @s[tag=scheduled_coinbar] function #aether:coinbar_allocation
        
        # Decrease the timer and reset the player's coinbar if the timer reaches zero
        if score @s coinbar_link isset function {
            scoreboard players remove @s coinbar_timer 1
            if score @s coinbar_timer matches ..0 function {
                function #aether:coinbar_resetting
                
                scoreboard players reset @s coinbar_link
                scoreboard players reset @s coinbar_timer
            }
        }
    }
}


#
#   COIN ENTITY
#

define entity coin minecraft:armor_stand {
    default nbt {Tags:["init"],Invisible:1b,Invulnerable:1b,Small:1b,ArmorItems:[{},{},{},{id:"aether:mob_model",Count:1b,tag:{CustomModelData:16}}]}
    
    ticking function {
        # Coin should glow
        set @s.Fire = 100s
        # Initialize this coin
        if entity @s[tag=init] function {
            # Make sure it has a `coins` score
            unless score @s coins isset set @s->coins = 1
            # If it has more than 5 coins, make it a big coin
            if score @s coins matches 5.. set @s.ArmorItems[3].tag.CustomModelData = 17
            # Reset age in case coins merged
            set @s->age = 0
            
            tag @s remove init
        }
        
        # Rotate
        # Needs to have .1 in some position axis since the
        # server doesn't send update information about the
        # armor stand by the rotation change alone
        at @s tp @s[nbt={OnGround:1b}] ~ ~.1 ~ ~18 ~
        
        tag @s add this
        # Merge if there's another coin nearby
        unless entity @s[tag=kill] if entity @e[tag=!this,type=$coin,distance=..1] function {
            tag @e[tag=!this,type=$coin,distance=..1,sort=nearest,limit=1] add to_merge
            var toMerge = entity<@e[tag=to_merge,limit=1]>
            
            # Add up the coins
            scoreboard players operation @s coins += $toMerge coins
            tag @s add init
            # Mark the other coin for removal
            # Don't kill straight away since apparently the other
            # coin can kill this one from beyond the grave
            tag $toMerge add kill
            tag $toMerge remove to_merge
        }
        tag @s remove this
        
        # Add itself to a player if picked up
        unless entity @s[tag=kill] if entity @a[distance=..1.25] function {
            tag @p[distance=..1.25] add picked_up_coin
            var target = entity<@a[tag=picked_up_coin,limit=1]>
            
            scoreboard players operation $target coins += @s coins
            playsound ${CoinInfo.pickupSound} player $target
            # use the glorified tag command
            as $target function aether:coins/show_coinbar
            kill @s
            
            tag $target remove picked_up_coin
        }
        
        # Count up the age
        scoreboard players add @s age 1
        # Despawn after 5 minutes
        if score @s age matches 6000.. kill @s
    }
    
    function spawn {
        anchored eyes summon $coin ^ ^ ^2
    }
}

define function item_to_coin {
    @ tag tick
    as @e[type=item,nbt={Item:{tag:{SpawnCoins:1b}}}] at @s function {
        summon $coin ~ ~ ~ {Tags:["new"]}
        set @e[type=$coin,tag=new,limit=1]->coins = @s.Item.Count
        set @e[type=$coin,tag=new,limit=1].Motion = @s.Motion
        set @e[type=$coin,tag=new,limit=1].Rotation = @s.Rotation
        tag @e[type=$coin,tag=new,limit=1] remove new
        kill @s
    }
}

